from dataclasses import dataclass, field
from typing import Any, Dict, List, Optional


@dataclass(frozen=True)
class Node:
    text: str
    metadata: Dict[str, Any] = field(default_factory=dict)


@dataclass(frozen=True)
class SourceChunk:
    """
    Represents a chunk of source text with associated metadata and an optional score.

    Attributes:
        text (str): The chunked text content. Must not be empty.
        metadata (dict): Metadata about the chunk (e.g., source, position, etc.).
        score (float | None): Similarity or relevance score. Should be between 0.0 and 1.0 if set.

    Example:
        chunk = SourceChunk(text="Example text", metadata={"source": "doc1.txt"}, score=0.85)
    """
    text: str
    metadata: Dict[str, Any] = field(default_factory=dict)
    score: Optional[float] = None

    def validate(self) -> None:
        """
        Validates the chunk's fields.
        Raises ValueError if text is empty or score is out of range.
        """
        if not self.text or not self.text.strip():
            raise ValueError("SourceChunk.text must not be empty.")
        if self.score is not None and not (0.0 <= self.score <= 1.0):
            raise ValueError("SourceChunk.score must be between 0.0 and 1.0.")

    @staticmethod
    def from_dict(data: Dict[str, Any]) -> "SourceChunk":
        """
        Creates a SourceChunk instance from a dictionary.
        """
        return SourceChunk(
            text=data.get("text", ""),
            metadata=data.get("metadata", {}),
            score=data.get("score")
        )

@dataclass(frozen=True)
class QueryResult:
    """
    Represents the result of a query, including the answer and source chunks.

    Attributes:
        answer (str): The answer generated by the pipeline. Must not be empty.
        source_chunks (list[SourceChunk]): List of relevant source chunks.

    Example:
        result = QueryResult(answer="42", source_chunks=[chunk1, chunk2])
    """
    answer: str
    source_chunks: List[SourceChunk] = field(default_factory=list)

    def validate(self) -> None:
        """
        Validates the result's fields.
        Raises ValueError if answer is empty or source_chunks is not a list of SourceChunk.
        """
        if not self.answer or not self.answer.strip():
            raise ValueError("QueryResult.answer must not be empty.")
        if not isinstance(self.source_chunks, list) or not all(isinstance(c, SourceChunk) for c in self.source_chunks):
            raise ValueError("QueryResult.source_chunks must be a list of SourceChunk.")

    def to_dict(self) -> Dict[str, Any]:
        """
        Converts the QueryResult to a dictionary for serialization.
        """
        return {
            "answer": self.answer,
            "source_chunks": [chunk.__dict__ for chunk in self.source_chunks]
        }

    def get_sources(self) -> List[Any]:
        """
        Returns a list of unique source metadata from the source chunks.
        """
        sources = set()
        for chunk in self.source_chunks:
            source = chunk.metadata.get("source")
            if source is not None:
                sources.add(source)
        return list(sources)
